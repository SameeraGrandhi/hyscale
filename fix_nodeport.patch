diff --git a/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/handler/impl/V1NodeUtil.java b/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/handler/impl/V1NodeUtil.java
new file mode 100644
index 0000000..ab18a76
--- /dev/null
+++ b/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/handler/impl/V1NodeUtil.java
@@ -0,0 +1,63 @@
+/**
+ * Copyright 2019 Pramati Prism, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.hyscale.deployer.services.handler.impl;
+
+
+import io.kubernetes.client.ApiClient;
+import io.kubernetes.client.ApiException;
+import io.kubernetes.client.apis.CoreV1Api;
+import io.kubernetes.client.models.V1Node;
+import io.kubernetes.client.models.V1NodeAddress;
+import io.kubernetes.client.models.V1NodeList;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.*;
+
+public class V1NodeUtil {
+
+    private static final Logger logger = LoggerFactory.getLogger(V1NodeUtil.class);
+    private static final String ExternalIP = "ExternalIP";
+    private static final String InternalIP = "InternalIP";
+
+
+    public static List<String> getNodeIPList(ApiClient apiClient) {
+        CoreV1Api coreV1Api = new CoreV1Api(apiClient);
+        try {
+            V1NodeList nodeList = coreV1Api.listNode("true", null, null, null, null, null, null, null);
+            if (nodeList != null && nodeList.getItems() != null && !nodeList.getItems().isEmpty()) {
+                List<String> ipList = new ArrayList<>();
+                for (V1Node node : nodeList.getItems()) {
+                    Map<String, String> typeVsAddress = new HashMap<>();
+                    for (V1NodeAddress nodeAddress : node.getStatus().getAddresses()) {
+                        typeVsAddress.put(nodeAddress.getType(), nodeAddress.getAddress());
+                    }
+                    if (typeVsAddress.getOrDefault(ExternalIP, null) != null) {
+                        ipList.add(typeVsAddress.get(ExternalIP));
+                        continue;
+                    } else if (typeVsAddress.getOrDefault(InternalIP, null) != null) {
+                        ipList.add(typeVsAddress.get(InternalIP));
+                        continue;
+                    }
+                }
+                return ipList;
+            }
+        } catch (ApiException e) {
+            logger.error("Error while fetching node ip");
+        }
+        return null;
+    }
+}
diff --git a/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/handler/impl/V1ServiceHandler.java b/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/handler/impl/V1ServiceHandler.java
index fa2494e..3badd1e 100644
--- a/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/handler/impl/V1ServiceHandler.java
+++ b/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/handler/impl/V1ServiceHandler.java
@@ -20,6 +20,7 @@ import java.util.List;
 import java.util.Properties;
 
 import com.google.common.io.Resources;
+import io.hyscale.commons.models.K8sServiceType;
 import io.hyscale.deployer.services.config.DeployerConfig;
 import io.hyscale.deployer.services.config.NonBeanDeployerConfig;
 import org.slf4j.Logger;
@@ -59,244 +60,251 @@ public class V1ServiceHandler implements ResourceLifeCycleHandler<V1Service> {
     private static final long MAX_LB_WAIT_TIME = 2000;
 
     @Override
-	public V1Service create(ApiClient apiClient, V1Service resource, String namespace) throws HyscaleException {
-		if (resource == null) {
-			LOGGER.debug("Cannot create null Service");
-			return resource;
-		}
-		WorkflowLogger.startActivity(DeployerActivity.DEPLOYING_SERVICE);
-		CoreV1Api coreV1Api = new CoreV1Api(apiClient);
-		String name = resource.getMetadata().getName();
-		V1Service v1Service = null;
-		try {
-			resource.getMetadata().putAnnotationsItem(
-					AnnotationKey.K8S_HYSCALE_LAST_APPLIED_CONFIGURATION.getAnnotation(), gson.toJson(resource));
-			v1Service = coreV1Api.createNamespacedService(namespace, resource, TRUE, null, null);
-		} catch (ApiException e) {
-			HyscaleException ex = new HyscaleException(e, DeployerErrorCodes.FAILED_TO_CREATE_RESOURCE,
-					ExceptionHelper.getExceptionMessage(getKind(), e, ResourceOperation.CREATE));
-			LOGGER.error("Error while creating Service {} in namespace {}, error {}", name, namespace, ex.toString());
-			WorkflowLogger.endActivity(Status.FAILED);
-			throw ex;
-		}
-		WorkflowLogger.endActivity(Status.DONE);
-		return v1Service;
-	}
+    public V1Service create(ApiClient apiClient, V1Service resource, String namespace) throws HyscaleException {
+        if (resource == null) {
+            LOGGER.debug("Cannot create null Service");
+            return resource;
+        }
+        WorkflowLogger.startActivity(DeployerActivity.DEPLOYING_SERVICE);
+        CoreV1Api coreV1Api = new CoreV1Api(apiClient);
+        String name = resource.getMetadata().getName();
+        V1Service v1Service = null;
+        try {
+            resource.getMetadata().putAnnotationsItem(
+                    AnnotationKey.K8S_HYSCALE_LAST_APPLIED_CONFIGURATION.getAnnotation(), gson.toJson(resource));
+            v1Service = coreV1Api.createNamespacedService(namespace, resource, TRUE, null, null);
+        } catch (ApiException e) {
+            HyscaleException ex = new HyscaleException(e, DeployerErrorCodes.FAILED_TO_CREATE_RESOURCE,
+                    ExceptionHelper.getExceptionMessage(getKind(), e, ResourceOperation.CREATE));
+            LOGGER.error("Error while creating Service {} in namespace {}, error {}", name, namespace, ex.toString());
+            WorkflowLogger.endActivity(Status.FAILED);
+            throw ex;
+        }
+        WorkflowLogger.endActivity(Status.DONE);
+        return v1Service;
+    }
 
-	@Override
-	public boolean update(ApiClient apiClient, V1Service resource, String namespace) throws HyscaleException {
-		if (resource == null) {
-			LOGGER.debug("Cannot update null Service");
-			return false;
-		}
-		CoreV1Api coreV1Api = new CoreV1Api(apiClient);
-		String name = resource.getMetadata().getName();
-		V1Service existingService = null;
-		try {
-			existingService = get(apiClient, name, namespace);
-		} catch (HyscaleException ex) {
-			LOGGER.debug("Error while getting Service {} in namespace {} for Update, creating new", name, namespace);
-			V1Service service = create(apiClient, resource, namespace);
-			return service != null ? true : false;
-		}
-		WorkflowLogger.startActivity(DeployerActivity.DEPLOYING_SERVICE);
-		try {
+    @Override
+    public boolean update(ApiClient apiClient, V1Service resource, String namespace) throws HyscaleException {
+        if (resource == null) {
+            LOGGER.debug("Cannot update null Service");
+            return false;
+        }
+        CoreV1Api coreV1Api = new CoreV1Api(apiClient);
+        String name = resource.getMetadata().getName();
+        V1Service existingService = null;
+        try {
+            existingService = get(apiClient, name, namespace);
+        } catch (HyscaleException ex) {
+            LOGGER.debug("Error while getting Service {} in namespace {} for Update, creating new", name, namespace);
+            V1Service service = create(apiClient, resource, namespace);
+            return service != null ? true : false;
+        }
+        WorkflowLogger.startActivity(DeployerActivity.DEPLOYING_SERVICE);
+        try {
 
-			String resourceVersion = existingService.getMetadata().getResourceVersion();
-			String clusterIP = existingService.getSpec().getClusterIP();
-			resource.getMetadata().setResourceVersion(resourceVersion);
-			resource.getSpec().setClusterIP(clusterIP);
-			coreV1Api.replaceNamespacedService(name, namespace, resource, TRUE, null, null);
-		} catch (ApiException e) {
-			HyscaleException ex = new HyscaleException(e, DeployerErrorCodes.FAILED_TO_UPDATE_RESOURCE,
-					ExceptionHelper.getExceptionMessage(getKind(), e, ResourceOperation.UPDATE));
-			LOGGER.error("Error while updating Service {} in namespace {}, error {}", name, namespace, ex.toString());
-			WorkflowLogger.endActivity(Status.FAILED);
-			throw ex;
-		}
+            String resourceVersion = existingService.getMetadata().getResourceVersion();
+            String clusterIP = existingService.getSpec().getClusterIP();
+            resource.getMetadata().setResourceVersion(resourceVersion);
+            resource.getSpec().setClusterIP(clusterIP);
+            coreV1Api.replaceNamespacedService(name, namespace, resource, TRUE, null, null);
+        } catch (ApiException e) {
+            HyscaleException ex = new HyscaleException(e, DeployerErrorCodes.FAILED_TO_UPDATE_RESOURCE,
+                    ExceptionHelper.getExceptionMessage(getKind(), e, ResourceOperation.UPDATE));
+            LOGGER.error("Error while updating Service {} in namespace {}, error {}", name, namespace, ex.toString());
+            WorkflowLogger.endActivity(Status.FAILED);
+            throw ex;
+        }
 
-	WorkflowLogger.endActivity(Status.DONE);
-	return true;
+        WorkflowLogger.endActivity(Status.DONE);
+        return true;
     }
 
     @Override
     public V1Service get(ApiClient apiClient, String name, String namespace) throws HyscaleException {
-	CoreV1Api coreV1Api = new CoreV1Api(apiClient);
-	V1Service v1Service = null;
-	try {
-	    v1Service = coreV1Api.readNamespacedService(name, namespace, TRUE, null, null);
-	} catch (ApiException e) {
-	    HyscaleException ex = ExceptionHelper.buildGetException(getKind(), e, ResourceOperation.GET);
-	    LOGGER.error("Error while fetching Service {} in namespace {}, error {} ", name, namespace, ex.toString());
-	    throw ex;
-	}
-	return v1Service;
+        CoreV1Api coreV1Api = new CoreV1Api(apiClient);
+        V1Service v1Service = null;
+        try {
+            v1Service = coreV1Api.readNamespacedService(name, namespace, TRUE, null, null);
+        } catch (ApiException e) {
+            HyscaleException ex = ExceptionHelper.buildGetException(getKind(), e, ResourceOperation.GET);
+            LOGGER.error("Error while fetching Service {} in namespace {}, error {} ", name, namespace, ex.toString());
+            throw ex;
+        }
+        return v1Service;
     }
 
     @Override
     public List<V1Service> getBySelector(ApiClient apiClient, String selector, boolean label, String namespace)
-	    throws HyscaleException {
-	CoreV1Api coreV1Api = new CoreV1Api(apiClient);
-	List<V1Service> v1Services = null;
-	try {
-	    String labelSelector = label ? selector : null;
-	    String fieldSelector = label ? null : selector;
-	    V1ServiceList v1ServiceList = coreV1Api.listNamespacedService(namespace, null, null, fieldSelector,
-		    labelSelector, null, null, null, null);
-	    v1Services = v1ServiceList != null ? v1ServiceList.getItems() : null;
-	} catch (ApiException e) {
-	    HyscaleException ex = ExceptionHelper.buildGetException(getKind(), e, ResourceOperation.GET_BY_SELECTOR);
-	    LOGGER.error("Error while listing Services in namespace {}, with selectors {}, error {} ", namespace,
-		    selector, ex.toString());
-	    throw ex;
-	}
-	return v1Services;
+            throws HyscaleException {
+        CoreV1Api coreV1Api = new CoreV1Api(apiClient);
+        List<V1Service> v1Services = null;
+        try {
+            String labelSelector = label ? selector : null;
+            String fieldSelector = label ? null : selector;
+            V1ServiceList v1ServiceList = coreV1Api.listNamespacedService(namespace, null, null, fieldSelector,
+                    labelSelector, null, null, null, null);
+            v1Services = v1ServiceList != null ? v1ServiceList.getItems() : null;
+        } catch (ApiException e) {
+            HyscaleException ex = ExceptionHelper.buildGetException(getKind(), e, ResourceOperation.GET_BY_SELECTOR);
+            LOGGER.error("Error while listing Services in namespace {}, with selectors {}, error {} ", namespace,
+                    selector, ex.toString());
+            throw ex;
+        }
+        return v1Services;
     }
 
-	@Override
-	public boolean patch(ApiClient apiClient, String name, String namespace, V1Service target) throws HyscaleException {
-		if (target == null) {
-			LOGGER.debug("Cannot patch null Service");
-			return false;
-		}
-		CoreV1Api coreV1Api = new CoreV1Api(apiClient);
-		target.getMetadata().putAnnotationsItem(AnnotationKey.K8S_HYSCALE_LAST_APPLIED_CONFIGURATION.getAnnotation(),
-				gson.toJson(target));
-		V1Service sourceService = null;
-		try {
-			sourceService = get(apiClient, name, namespace);
-		} catch (HyscaleException e) {
-			LOGGER.debug("Error while getting Service {} in namespace {} for Patch, creating new", name, namespace);
-			V1Service service = create(apiClient, target, namespace);
-			return service != null ? true : false;
-		}
-		WorkflowLogger.startActivity(DeployerActivity.DEPLOYING_SERVICE);
-		Object patchObject = null;
-		String lastAppliedConfig = sourceService.getMetadata().getAnnotations()
-				.get(AnnotationKey.K8S_HYSCALE_LAST_APPLIED_CONFIGURATION.getAnnotation());
-		try {
-			patchObject = K8sResourcePatchUtil.getJsonPatch(gson.fromJson(lastAppliedConfig, V1Service.class), target,
-					V1Service.class);
-			V1Patch v1Patch = new V1Patch(patchObject.toString());
-			coreV1Api.patchNamespacedService(name, namespace, v1Patch, TRUE, null, null, null);
-		} catch (HyscaleException ex) {
-			LOGGER.error("Error while creating patch for Service {}, source {}, target {}, error", name, sourceService,
-					target, ex.toString());
-			WorkflowLogger.endActivity(Status.FAILED);
-			throw ex;
-		} catch (ApiException e) {
-			HyscaleException ex = new HyscaleException(e, DeployerErrorCodes.FAILED_TO_PATCH_RESOURCE,
-					ExceptionHelper.getExceptionMessage(getKind(), e, ResourceOperation.PATCH));
-			LOGGER.error("Error while patching Service {} in namespace {} , error {}", name, namespace, ex.toString());
-			WorkflowLogger.endActivity(Status.FAILED);
-			throw ex;
-		}
-		WorkflowLogger.endActivity(Status.DONE);
-		return true;
-	}
+    @Override
+    public boolean patch(ApiClient apiClient, String name, String namespace, V1Service target) throws HyscaleException {
+        if (target == null) {
+            LOGGER.debug("Cannot patch null Service");
+            return false;
+        }
+        CoreV1Api coreV1Api = new CoreV1Api(apiClient);
+        target.getMetadata().putAnnotationsItem(AnnotationKey.K8S_HYSCALE_LAST_APPLIED_CONFIGURATION.getAnnotation(),
+                gson.toJson(target));
+        V1Service sourceService = null;
+        try {
+            sourceService = get(apiClient, name, namespace);
+        } catch (HyscaleException e) {
+            LOGGER.debug("Error while getting Service {} in namespace {} for Patch, creating new", name, namespace);
+            V1Service service = create(apiClient, target, namespace);
+            return service != null ? true : false;
+        }
+        WorkflowLogger.startActivity(DeployerActivity.DEPLOYING_SERVICE);
+        Object patchObject = null;
+        String lastAppliedConfig = sourceService.getMetadata().getAnnotations()
+                .get(AnnotationKey.K8S_HYSCALE_LAST_APPLIED_CONFIGURATION.getAnnotation());
+        try {
+            patchObject = K8sResourcePatchUtil.getJsonPatch(gson.fromJson(lastAppliedConfig, V1Service.class), target,
+                    V1Service.class);
+            V1Patch v1Patch = new V1Patch(patchObject.toString());
+            coreV1Api.patchNamespacedService(name, namespace, v1Patch, TRUE, null, null, null);
+        } catch (HyscaleException ex) {
+            LOGGER.error("Error while creating patch for Service {}, source {}, target {}, error", name, sourceService,
+                    target, ex.toString());
+            WorkflowLogger.endActivity(Status.FAILED);
+            throw ex;
+        } catch (ApiException e) {
+            HyscaleException ex = new HyscaleException(e, DeployerErrorCodes.FAILED_TO_PATCH_RESOURCE,
+                    ExceptionHelper.getExceptionMessage(getKind(), e, ResourceOperation.PATCH));
+            LOGGER.error("Error while patching Service {} in namespace {} , error {}", name, namespace, ex.toString());
+            WorkflowLogger.endActivity(Status.FAILED);
+            throw ex;
+        }
+        WorkflowLogger.endActivity(Status.DONE);
+        return true;
+    }
 
     @Override
     public boolean delete(ApiClient apiClient, String name, String namespace, boolean wait) throws HyscaleException {
-	CoreV1Api coreV1Api = new CoreV1Api(apiClient);
+        CoreV1Api coreV1Api = new CoreV1Api(apiClient);
 
-	V1DeleteOptions deleteOptions = getDeleteOptions();
-	ActivityContext activityContext = new ActivityContext(DeployerActivity.DELETING_SERVICE);
-	WorkflowLogger.startActivity(activityContext);
-	try {
-	    try {
-			coreV1Api.deleteNamespacedService(name, namespace, TRUE, deleteOptions, null, null, null, null);
-	    } catch (JsonSyntaxException e) {
-		// K8s end exception ignore
-	    }
-	    List<String> serviceList = Lists.newArrayList();
-	    serviceList.add(name);
-	    if (wait) {
-		waitForResourceDeletion(apiClient, serviceList, namespace, activityContext);
-	    }
-	} catch (ApiException e) {
-	    if (e.getCode() == 404) {
-		WorkflowLogger.endActivity(activityContext, Status.NOT_FOUND);
-		return false;
-	    }
-	    HyscaleException ex = new HyscaleException(e, DeployerErrorCodes.FAILED_TO_DELETE_RESOURCE,
-		    ExceptionHelper.getExceptionMessage(getKind(), e, ResourceOperation.DELETE));
-	    LOGGER.error("Error while deleting Service {} in namespace {} error {}", name, namespace, ex.toString());
-	    WorkflowLogger.endActivity(activityContext, Status.FAILED);
-	    throw ex;
-	}
-	WorkflowLogger.endActivity(activityContext, Status.DONE);
-	return true;
+        V1DeleteOptions deleteOptions = getDeleteOptions();
+        ActivityContext activityContext = new ActivityContext(DeployerActivity.DELETING_SERVICE);
+        WorkflowLogger.startActivity(activityContext);
+        try {
+            try {
+                coreV1Api.deleteNamespacedService(name, namespace, TRUE, deleteOptions, null, null, null, null);
+            } catch (JsonSyntaxException e) {
+                // K8s end exception ignore
+            }
+            List<String> serviceList = Lists.newArrayList();
+            serviceList.add(name);
+            if (wait) {
+                waitForResourceDeletion(apiClient, serviceList, namespace, activityContext);
+            }
+        } catch (ApiException e) {
+            if (e.getCode() == 404) {
+                WorkflowLogger.endActivity(activityContext, Status.NOT_FOUND);
+                return false;
+            }
+            HyscaleException ex = new HyscaleException(e, DeployerErrorCodes.FAILED_TO_DELETE_RESOURCE,
+                    ExceptionHelper.getExceptionMessage(getKind(), e, ResourceOperation.DELETE));
+            LOGGER.error("Error while deleting Service {} in namespace {} error {}", name, namespace, ex.toString());
+            WorkflowLogger.endActivity(activityContext, Status.FAILED);
+            throw ex;
+        }
+        WorkflowLogger.endActivity(activityContext, Status.DONE);
+        return true;
     }
 
     @Override
     public boolean deleteBySelector(ApiClient apiClient, String selector, boolean label, String namespace, boolean wait)
-	    throws HyscaleException {
-	boolean isSuccess = true;
-	List<V1Service> v1Services = getBySelector(apiClient, selector, label, namespace);
-	if (v1Services == null || v1Services.isEmpty()) {
-	    return false;
-	}
-	for (V1Service v1Service : v1Services) {
-	    isSuccess = delete(apiClient, v1Service.getMetadata().getName(), namespace, wait) ? isSuccess : false;
-	}
-	return isSuccess;
+            throws HyscaleException {
+        boolean isSuccess = true;
+        List<V1Service> v1Services = getBySelector(apiClient, selector, label, namespace);
+        if (v1Services == null || v1Services.isEmpty()) {
+            return false;
+        }
+        for (V1Service v1Service : v1Services) {
+            isSuccess = delete(apiClient, v1Service.getMetadata().getName(), namespace, wait) ? isSuccess : false;
+        }
+        return isSuccess;
     }
 
     @Override
     public String getKind() {
-	return ResourceKind.SERVICE.getKind();
+        return ResourceKind.SERVICE.getKind();
     }
 
     @Override
     public boolean cleanUp() {
-	return true;
+        return true;
     }
 
     @Override
     public int getWeight() {
-	return ResourceKind.SERVICE.getWeight();
+        return ResourceKind.SERVICE.getWeight();
     }
 
-	public ServiceAddress getServiceAddress(ApiClient apiClient, String name, String namespace, boolean wait)
-			throws HyscaleException {
+    public ServiceAddress getServiceAddress(ApiClient apiClient, String name, String namespace, boolean wait)
+            throws HyscaleException {
 
-		if (!wait) {
-			return getServiceAddress(apiClient, name, namespace);
-		}
-		long startTime = System.currentTimeMillis();
-		V1Service v1Service = null;
-		V1LoadBalancerIngress loadBalancerIngress = null;
-		ActivityContext serviceIPContext = new ActivityContext(DeployerActivity.WAITING_FOR_SERVICE_IP);
-		WorkflowLogger.startActivity(serviceIPContext);
-		try {
-			while (System.currentTimeMillis() - startTime < MAX_LB_READY_STATE_TIME) {
-				WorkflowLogger.continueActivity(serviceIPContext);
-				v1Service = get(apiClient, name, namespace);
-				loadBalancerIngress = K8sServiceUtil.getLoadBalancer(v1Service);
+        if (!wait) {
+            return getServiceAddress(apiClient, name, namespace);
+        }
+        long startTime = System.currentTimeMillis();
+        V1Service v1Service = null;
+        V1LoadBalancerIngress loadBalancerIngress = null;
+        ActivityContext serviceIPContext = new ActivityContext(DeployerActivity.WAITING_FOR_SERVICE_IP);
+        WorkflowLogger.startActivity(serviceIPContext);
+        boolean nodePort = false;
+        try {
+            while (System.currentTimeMillis() - startTime < MAX_LB_READY_STATE_TIME) {
+                WorkflowLogger.continueActivity(serviceIPContext);
+                v1Service = get(apiClient, name, namespace);
+                if (v1Service != null) {
+                    if (v1Service.getSpec().getType().equals(K8sServiceType.NodePort.name())) {
+                        logger.debug("Observed Nodeport not waiting for service ip");
+                        nodePort = true;
+                        break;
+                    }
+                }
+                loadBalancerIngress = K8sServiceUtil.getLoadBalancer(v1Service);
 
-				if (loadBalancerIngress != null) {
-					break;
-				}
-				Thread.sleep(MAX_LB_WAIT_TIME);
-			}
-		} catch (InterruptedException e) {
-			LOGGER.debug("Error while loadbalancer ready state condition");
-		}
-		if (loadBalancerIngress == null) {
-			WorkflowLogger.endActivity(serviceIPContext, Status.FAILED);
-			throw new HyscaleException(DeployerErrorCodes.FAILED_TO_GET_SERVICE_ADDRESS, getKind(), name, namespace);
-		}
-		WorkflowLogger.endActivity(serviceIPContext, Status.DONE);
+                if (loadBalancerIngress != null) {
+                    break;
+                }
+                Thread.sleep(MAX_LB_WAIT_TIME);
+            }
+        } catch (InterruptedException e) {
+            LOGGER.debug("Error while loadbalancer ready state condition");
+        }
+        if (loadBalancerIngress == null && !nodePort) {
+            WorkflowLogger.endActivity(serviceIPContext, Status.FAILED);
+            throw new HyscaleException(DeployerErrorCodes.FAILED_TO_GET_SERVICE_ADDRESS, getKind(), name, namespace);
+        }
+        WorkflowLogger.endActivity(serviceIPContext, Status.DONE);
 
-		return K8sServiceUtil.getServiceAddress(v1Service);
-	}
+        return K8sServiceUtil.getServiceAddress(v1Service, apiClient);
+    }
 
     private ServiceAddress getServiceAddress(ApiClient apiClient, String name, String namespace)
-	    throws HyscaleException {
-
-	V1Service service = get(apiClient, name, namespace);
+            throws HyscaleException {
 
-	return K8sServiceUtil.getServiceAddress(service);
+        V1Service service = get(apiClient, name, namespace);
+        return K8sServiceUtil.getServiceAddress(service, apiClient);
 
     }
 
diff --git a/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/util/K8sServiceUtil.java b/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/util/K8sServiceUtil.java
index 35a1ca5..4c3aa64 100644
--- a/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/util/K8sServiceUtil.java
+++ b/deployer/deployer-services/src/main/java/io/hyscale/deployer/services/util/K8sServiceUtil.java
@@ -18,61 +18,91 @@ package io.hyscale.deployer.services.util;
 import java.util.ArrayList;
 import java.util.List;
 
+import io.hyscale.commons.models.K8sServiceType;
+import io.hyscale.deployer.services.handler.impl.V1NodeUtil;
 import io.hyscale.deployer.services.model.ServiceAddress;
+import io.kubernetes.client.ApiClient;
 import io.kubernetes.client.models.V1LoadBalancerIngress;
 import io.kubernetes.client.models.V1Service;
 import io.kubernetes.client.models.V1ServicePort;
 
 /**
  * Utility to process information from {@link V1Service}
- *
  */
 public class K8sServiceUtil {
 
-	public static ServiceAddress getServiceAddress(V1Service service) {
-		if (service == null) {
-			return null;
-		}
-		ServiceAddress serviceAddress = new ServiceAddress();
-		V1LoadBalancerIngress loadBalancerIngress = getLoadBalancer(service);
-		if (loadBalancerIngress != null) {
-			String host = loadBalancerIngress.getIp() == null ? loadBalancerIngress.getHostname()
-					: loadBalancerIngress.getIp();
-			serviceAddress.setServiceIP(host);
-		}
-		List<Integer> ports = getPorts(service);
-		serviceAddress.setPorts(ports);
+    public static ServiceAddress getServiceAddress(V1Service service) {
+        if (service == null) {
+            return null;
+        }
+        ServiceAddress serviceAddress = new ServiceAddress();
+        V1LoadBalancerIngress loadBalancerIngress = getLoadBalancer(service);
+        if (loadBalancerIngress != null) {
+            String host = loadBalancerIngress.getIp() == null ? loadBalancerIngress.getHostname()
+                    : loadBalancerIngress.getIp();
+            serviceAddress.setServiceIP(host);
+        }
+        List<Integer> ports = getPorts(service);
+        serviceAddress.setPorts(ports);
 
-		return serviceAddress;
-	}
+        return serviceAddress;
+    }
 
-	public static V1LoadBalancerIngress getLoadBalancer(V1Service lbSvc) {
-		V1LoadBalancerIngress loadBalancerIngress = null;
-		if (lbSvc == null || lbSvc.getStatus() == null || lbSvc.getStatus().getLoadBalancer() == null) {
-			return loadBalancerIngress;
-		}
-		List<V1LoadBalancerIngress> ingressList = lbSvc.getStatus().getLoadBalancer().getIngress();
-		if (ingressList != null && !ingressList.isEmpty()) {
-			loadBalancerIngress = ingressList.get(0);
-		}
-		return loadBalancerIngress;
-	}
+    public static ServiceAddress getServiceAddress(V1Service service, ApiClient apiClient) {
+        if (service == null) {
+            return null;
+        }
+        ServiceAddress serviceAddress = new ServiceAddress();
+        boolean nodePort = false;
+        if (service.getSpec().getType().equals(K8sServiceType.NodePort.name())) {
+            nodePort = true;
+            List<String> hostList = V1NodeUtil.getNodeIPList(apiClient);
+            if (hostList != null && !hostList.isEmpty()) {
+                serviceAddress.setServiceIP(hostList.get(0));
+            }
+        } else if (service.getSpec().getType().equals(K8sServiceType.LoadBalancer.name())) {
+            V1LoadBalancerIngress loadBalancerIngress = getLoadBalancer(service);
+            if (loadBalancerIngress != null) {
+                String host = loadBalancerIngress.getIp() == null ? loadBalancerIngress.getHostname()
+                        : loadBalancerIngress.getIp();
+                serviceAddress.setServiceIP(host);
+            }
+        }
+        List<Integer> ports = getPorts(service);
+        serviceAddress.setPorts(ports);
 
-    public static List<Integer> getPorts(V1Service service) {
-	if (service == null || service.getSpec() == null) {
-	    return null;
-	}
-	List<V1ServicePort> v1ServicePorts = service.getSpec().getPorts();
-	if (v1ServicePorts == null || v1ServicePorts.isEmpty()) {
-	    return null;
-	}
-	List<Integer> portsList = new ArrayList<Integer>();
+        return serviceAddress;
+    }
 
-	v1ServicePorts.forEach(each -> {
-	    if (each != null && each.getPort() != null) {
-		portsList.add(each.getPort());
-	    }
-	});
-	return portsList;
+    public static V1LoadBalancerIngress getLoadBalancer(V1Service lbSvc) {
+        V1LoadBalancerIngress loadBalancerIngress = null;
+        if (lbSvc == null || lbSvc.getStatus() == null || lbSvc.getStatus().getLoadBalancer() == null || lbSvc.getStatus().getLoadBalancer() == null) {
+            return loadBalancerIngress;
+        }
+        List<V1LoadBalancerIngress> ingressList = lbSvc.getStatus().getLoadBalancer().getIngress();
+        if (ingressList != null && !ingressList.isEmpty()) {
+            loadBalancerIngress = ingressList.get(0);
+        }
+        return loadBalancerIngress;
     }
+
+    public static List<Integer> getPorts(V1Service service) {
+        if (service == null || service.getSpec() == null) {
+            return null;
+        }
+        List<V1ServicePort> v1ServicePorts = service.getSpec().getPorts();
+        if (v1ServicePorts == null || v1ServicePorts.isEmpty()) {
+            return null;
+        }
+        List<Integer> portsList = new ArrayList<Integer>();
+        boolean nodePort = service.getSpec().getType().equals(K8sServiceType.NodePort.name());
+        v1ServicePorts.forEach(each -> {
+            if (each != null && each.getPort() != null) {
+                int port = nodePort ? each.getNodePort() : each.getPort();
+                portsList.add(port);
+            }
+        });
+        return portsList;
+    }
+
 }
diff --git a/manifest-generator/generator-services/src/main/java/io/hyscale/generator/services/plugins/ServiceTypeHandler.java b/manifest-generator/generator-services/src/main/java/io/hyscale/generator/services/plugins/ServiceTypeHandler.java
index fbca2d8..ae94d75 100644
--- a/manifest-generator/generator-services/src/main/java/io/hyscale/generator/services/plugins/ServiceTypeHandler.java
+++ b/manifest-generator/generator-services/src/main/java/io/hyscale/generator/services/plugins/ServiceTypeHandler.java
@@ -48,7 +48,7 @@ public class ServiceTypeHandler implements ManifestHandler {
             Boolean external = serviceSpec.get(HyscaleSpecFields.external, Boolean.class);
             K8sServiceType serviceType = getServiceType(external == null ? false : external);
             String serviceTypeName = serviceType != null ? serviceType.name() : K8sServiceType.ClusterIP.name();
-            logger.debug("Processing Service Type {}.",serviceTypeName);
+            logger.debug("Processing Service Type {}.", serviceTypeName);
             serviceTypeSnippet.setSnippet(serviceTypeName);
             manifestSnippetList.add(serviceTypeSnippet);
         }
@@ -69,7 +69,7 @@ public class ServiceTypeHandler implements ManifestHandler {
     }
 
     private boolean checkForLoadBalancerType() {
-        return true;
+        return false;
     }
 
 }
